;///////////////////////////////////////////////////////////////
;// Copyright (c) Varania OS team 2019. All rights reserved.  //
;// Distributed under terms of the GNU General Public License //
;// Модуль для работы с жестким диском средствами             //
;// BIOS EDD - Enhanced Disk Drive Service                    //
;// Дата: 30.07.2019                                          //
;///////////////////////////////////////////////////////////////

;// КОНСТАНТЫ

;// Коды ошибок
disk.ERR_0  equ 0x00 ;// Успешное завершение операции, ошибок нет
disk.ERR_1  equ 0x01 ;// Недопустимый номер функции или параметр
disk.ERR_2  equ 0x02 ;// Не найден адресный маркер
disk.ERR_3  equ 0x04 ;// Сектор не найден
disk.ERR_4  equ 0x05 ;// Сброс в исходное состояние не выполнен
disk.ERR_5  equ 0x07 ;// Повреждена таблица параметров диска
disk.ERR_6  equ 0x0A ;// Обнаружен дефектный сектор
disk.ERR_7  equ 0x10 ;// При чтении по контрольному коду обнаружена не исправимая ошибка
disk.ERR_8  equ 0x11 ;// При чтении по контрольному коду обнаружена ошибка и исправлена
disk.ERR_9  equ 0x20 ;// Отказ контроллера
disk.ERR_10 equ 0x40 ;// Сбой при выполнении поиска
disk.ERR_11 equ 0x80 ;// Диск не отвечает (тайм-аут)
disk.ERR_12 equ 0xAA ;// Дисковод не готов
disk.ERR_13 equ 0xBB ;// Неизвестная ошибка
disk.ERR_14 equ 0xCC ;// Ошибка при записи
disk.ERR_15 equ 0xE0 ;// Ошибка регистра состояния
disk.ERR_16 equ 0xB0 ;// Том не заперт
disk.ERR_17 equ 0xB1 ;// Том заперт в дисководе
disk.ERR_18 equ 0xB2 ;// Том неперемещаемый
disk.ERR_19 equ 0xB3 ;// Том используется
disk.ERR_20 equ 0xB4 ;// Счётчик запирания переполнен
disk.ERR_21 equ 0xB5 ;// Команда извлечения носителя не выполнена
disk.ERR_22 equ 0xB6 ;// Носитель присутствует, но защищён от записи

;// МАКРОСЫ

;// Макрос для чтения секторов с диска в режиме LBA
;// Использует 16 байтовую структуру DAP
;// Может загрузить не более 127 секторов (65024 Кб) за один раз в 
;// буфер находящийся в пределах первого мегабайта 
;// Вход
;//   disk_id   - Номер диска источника
;//   h_sec_id  - Старшая часть LBA номера первого загружаемого сектора
;//   l_sec_id  - Младшая часть LBA номера первого загружаемого сектора
;//   sec_count - Сколько секторов загрузить, не более 127
;//   seg_buff  - Адрес сегмента, куда будет загружен сектор
;//   off_buff  - Адрес смещения, куда будет загружен сектор
;// Выход
;//   AH - Код возврата, 0 в случае успеха
macro disk.load_sectors_dap16 disk_id, sec_h_id, sec_l_id, sec_count, seg_buff, off_buff
{
  push dx si
  ;// Разместим структуру DAP в стеке
  push dword sec_h_id   ;// Старшие 4 байта номера начального сектора
  push dword sec_l_id   ;// Младшие 4 байта номера начального сектора
  push word  seg_buff   ;// Адрес сегмента, куда будет загружен сектор
  push word  off_buff   ;// Адрес смещения, куда будет загружен сектор
  push word  sec_count  ;// Сколько секторов загружать и зарезервированный 0
  push word  16         ;// Размер структуры DAP и зарезервированный 0
  mov dl, disk_id
  mov si, sp            ;// Передадим адрес к структуре DAP 
  call disk_load_sector
  pop si dx
}
  
sector_height_id dd 0
sector_low_id    dd 0

macro disk.load_sectors disk_id, sec_h_id, sec_l_id, sec_count, buff_addr
{
  pushad
  push dword sec_h_id 
  push dword sec_l_id
  pop [sector_low_id]
  pop [sector_height_id]
  
  mov edi,buff_addr
  mov ecx,sec_count
  @@:
    ;// Перевод линейного адреса в адрес формата Сегмент:Смещение
    mov eax, edi ;// Линейный адрес
    xor edx, edx
    mov ebx, 16  ;// делим на 16
    div ebx
    ;// Получаем в EAX сегмент, EDX смещение
    
    disk.load_sectors_dap16 disk_id, [sector_height_id], [sector_low_id], 1, ax, dx
    
    ;// Переход к следующему сектору
    cmp [sector_low_id], 0xFFFFFFFF
    jnz .next
    inc [sector_height_id]
    .next:
      inc [sector_low_id]
      
    ;// Переход к следующей области памяти
    add edi, 512
    loop @b
  popad
}

;// ПОДПРОГРАММЫ

;// Чтение сектора в LBA режиме
;// Вход
;//   DL - Номер диска источника
;//   DS:SI - Адрес структуры DAP в памяти
;// Выход
;//   AH - Код возврата, 0 в случае успеха
disk_load_sector:
  mov ah, 0x42  ;// Функция 42h (LBA копирования) 13h прерывания
  int 0x13      ;// Обращение к BIOS, копировать данные
  ;//jc .error  ;// Если ошибка чтения
  ret 16        ;// Возврат из подпрограммы
  ;//.error:

;// +-------------------DAP - Disk Adress Packet---------------------------------------------------------------------
;// | 1 байт  - Размер структуры DAP = Сумма всех полей структуры не менее 16 байт. В данном случае 32
;// | 1 байт  - Зарезервировано = 0
;// | 1 байта - Количество секторов для загрузки (0-127),
;// |           или признак передачи большого массива данных (FFh), в этом случае используеться 64 битная адресация данных:
;// |           адрес буфера задаётся не двойным словом Сегмент:Смещение а 64 разрядным линейным адресом,
;// |           число передаваемых секторов задаётся двойным словом
;// | 1 байт  - Зарезервировано = 0
;// | 4 байта - Адрес вида Сегмент:Смешение на область в памяти, куда будут скопированы сектора, 
;// |           в этом случаем буфер должен находиться в пределаг первого мегабайта.
;// |           Если данное поле содержит FFFF:FFFFh, то буфер задаётся 64 разрядным  линейным адресом
;// | 8 байт  - LBA номер сектора с которого начинается чтение
;// | 8 байт  - 64 - разрядный линейный адрес на область в памяти, куда будут скопированы сектора.
;// |           В адресе вида Сегмент:Смешение должен присутствовать признак линейной адресации памяти (FFFF:FFFFh)
;// | 4 байта - Число передаваемых секторов при передачи большого массива данных 
;// | 4 байта - Зарезервировано = 0
;// +----------------------------------------------------------------------------------------------------------------
